//
//  NewsListViewController.swift
//  NewsApp
//
//  Created by admin on 29.10.2022.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import RxCocoa
import RxSwift

protocol NewsListDisplayLogic: AnyObject
{
    func displayFetchedNews(viewModel: News.FetchPost.ViewModel)
    func displayFetchedManagedNews(viewModel: News.FetchManagedPost.ViewModel)
}

class NewsListViewController: UIViewController, NewsListDisplayLogic
{
    @IBOutlet weak var tableView: UITableView!
    var interactor: NewsListBusinessLogic?
  var router: (NSObjectProtocol & NewsListRoutingLogic & NewsListDataPassing)?
    private let disposeBag = DisposeBag()
    private var newData : [Article] = [] {
        didSet {
            setupCellConfiguration()
        }
    }
    private lazy var news : Observable<[Article]> = Observable.just(newData)
    private var savedArray = [Article]()

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = NewsListInteractor()
    let presenter = NewsListPresenter()
    let router = NewsListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
      getNewsList()
      setupCellTapHandling()
  }
}

extension NewsListViewController {
    func displayFetchedNews(viewModel: News.FetchPost.ViewModel) {
        self.newData = viewModel.post ?? [Article]()
    }
    
    private func getNewsList()
    {
        let request = News.FetchPost.Request()
        interactor?.fetchNews(request: request)
    }
    
    func displayFetchedManagedNews(viewModel: News.FetchManagedPost.ViewModel) {
        savedArray.removeAll(keepingCapacity: false)
        savedArray = viewModel.post ?? []
    }
    
    private func getSavedList() {
        let savedRequest = News.FetchManagedPost.Request()
        interactor?.getFavoritedNews(request: savedRequest)
    }
}

extension NewsListViewController {
    private func setupCellConfiguration() {
        //1
        news
            .bind(to: tableView
                .rx // 2
                .items(cellIdentifier: "newCell", cellType: NewsCell.self)) { row, element, cell in // 3
                    cell.configureWithNew(withNew: element)
                    
                }
                .disposed(by: disposeBag) // 5
    }
    
    private func setupCellTapHandling() {
        tableView
            .rx // 1
            .modelSelected(Article.self) // 2
            .subscribe(onNext: { [weak self] new in // 3
                self!.router?.routeToNewDetails(segue: nil)
                
                if let selectedRowIndexPath = self?.tableView.indexPathForSelectedRow { // 5
                    self?.tableView.deselectRow(at: selectedRowIndexPath, animated: true)
                }
            })
            .disposed(by: disposeBag) // 6    }
    }

}


